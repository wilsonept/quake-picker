* Основной фронт работ.
  Основной фронт работ необходимый для того что бы приложение заработало.

** DONE Переписать модели под новую архитектуру.
*** DONE Переписать свойства таблиц и их связи.
    - [X] Переименовать класс Result в Session.
    - [X] Создать новые связи таблицы Session c Map_choice и Champ_choice
    - [X] Создать связи Room с Map_choice и Champ_choice.
    - [X] Переделать связи что бы было понятно где какая связь.

*** DONE Перестроить базу данных.
*** DONE Внести изменения в документацию.

** DONE Переписать логику *models.py*
   - [X] Переписать основные функции и методы, для работы с новой архитектурой.
   - [X] Добавить код самотестирования работы БД.

** TODO Переписать логику *main.py*
   - [X] create
   - [X] join
   - [X] room
   - [X] results
   - [X] getState
   - [X] updateState
   - [ ] Добавить страницу для маршрута /home, с двумя кнопками выбора.

** TODO Скорректировать работу шаблонов *jinja*
   - [X] room
   - [X] results

** TODO Скорректировать работу *main.js*
   - [X] getPickedMaps
   - [X] getPickedChamps
   - [X] getCurrentMap
   - [X] Сделать отмену таймера *updatePage* для *xhr* режима.
     Добавил проверку функцию *updatePage*, если приложение на странице
     *results* то отменить таймер.

** DONE Создать новую ветку *feature* для разработки нового функционала.
** TODO Добавить функционал работы приложения через *websocket*
   - [X] Создать *websocket* маршрут в *main.py*
     Необходимо что бы он отдавал *JSON*
   - [X] Создать *websocket* приемник в *main.js*
     Необходимо что бы он принимал *JSON*
   - [X] Добавить проверку *appMode* в функцию *updatePage*
   - [X] Переименовать функцию *sendRequest* в *sendXHR*
   - [X] Добавить функцию *sendRequest*
     Нужна для того что бы отправлять запросы на сервер в зависимости
     от того в каком режиме работает приложение *xhr* или *ws*
   - [ ] Реализовать массовую рассылку ответа на открытые веб-сокеты комнаты.
     На данный момент при попытке отправить результат выбора чаще всего
     веб-сокет закрывается с ошибкой.

** TODO Протестировать класс *MimicUUID* в работе с *PostgreSQL*.
** TODO Перепроверить стилистику написания операция сравнения.
** DONE Изменить переменную *map* на *mep* во всех файлах приложения.

* Работы по улучшению и оптимизации.
  Работы которые необходимо проделать для улучшения работы приложения.

** DONE Изменить *img_url* в БД на полный корректный путь.
  - [X] Дополнительно добавил в БД *r_img_url* для доп картинок страницы результатов.

** DONE Не отображается результат выбора последней карты.
   После выбора последней карты перед переходом к выбору чемпионов карта
   не обводится зеленым и бывает что она разблокируется у оппонента.
   Баг решен путем изменения последовательности rebuildPage и updateClasses.
   Теперь эти функции выполняются по цепочке после ответа от сервера.
   #BEGIN_SRC js
   sendRequest(body).then(updateClasses).then(rebuildPage)
   #END_SRC
   Логика работы updateClasses переработана. Теперь функция перебирает
   все объекты полученные от сервера (map_choices и champ_choices) что и
   позволило лицезреть заветную рамку выбора вокруг последнего объекта
   на странице. И как бонус рефакторинга код стал короче.

** TODO Убрать вспомогательные функции *models.py* в модели.
   - [ ] champ_choices_to_dict
   - [ ] map_choices_to_dict
   - [ ] sessions_to_dict
   - [ ] objects_to_dict

** TODO Добавить проверки выбираемых объектов.
   Что бы по ошибке не получилось так что оба игрока выбрали одну
   и туже карту или чемпиона, необходимо что бы при сохранении выбора
   в функции *save_choice* была проверка, был ли выбран объект
   ранее.

** TODO Уменьшить количество запросов к БД в функции *generate_report*
   *generate_report* использует два запроса для того что бы получить
   *maps* и *champs*. Необходимо уменьшить до одного.
   #+BEGIN_SRC sql
   -- Пример запроса который необходимо реализовать в приложении.
   SELECT game_modes.id as gmid, bo_types.id as btid, rules.id as rid
   FROM game_modes 
   CROSS JOIN bo_types
   CROSS JOIN rules
   WHERE game_modes.id=1 and bo_types.id=1 and rules.step=1;
   #+END_SRC
   
** TODO Уменьшить количество запросов к БД в функции *convert_data*
   *convert_data* использует два запроса для того что бы получить
   *game_mode_id* и *bo_type_id*. Необходимо уменьшить до одного.
   
** TODO Покрыть основные функции *models.py* тестами.
   - [ ] start_game
   - [ ] join_game
   - [ ] generate_report

** TODO Покрыть flask маршруты *main.py* тестами.
   - [ ] create
   - [ ] join
   - [ ] room
   - [ ] results

** TODO Покрыть json_rpc маршруты *main.py* тестами.
   - [ ] getState
   - [ ] updateState

** TODO Покрыть json_rpc маршруты *main.py* тестами.
   - [ ] getStateWS

** TODO Покрыть модели *models.py* тестами.
** TODO Покрыть основные функции *main.js* тестами.
** TODO Создать таблицы для хранения путей картинок.
   Создать таблицы с отношениями с таблицей *users*
   - [ ] Для хранения путей до картинок постеров игроков.
   - [ ] Для хранения путей до иконок стран.
   - [ ] Для хранения путей до иконок команд.